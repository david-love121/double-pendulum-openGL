#pragma once

#include "PendulumState.h"
#include "ChaosAnalysis.h"
#include <memory>

namespace pendulum {

// Forward declarations
class ViewManager;

/**
 * UI events generated by user interactions
 */
struct UIEvents {
    bool view_changed = false;
    bool simulation_reset = false;
    bool simulation_play_pause = false;
    bool analysis_start = false;
    bool parameters_changed = false;
    int new_view_id = 0;
};

/**
 * UI context for current application state
 */
struct UIContext {
    bool simulation_running = false;
    bool analysis_computing = false;
    double computation_progress = 0.0;
    int current_view = 0; // 0=simulation, 1=analysis
};

/**
 * Parameters for simulation view
 */
struct SimulationParams {
    double l1 = 1.0, l2 = 1.0;           // Pendulum lengths
    double m1 = 1.0, m2 = 1.0;           // Pendulum masses
    double theta1_0 = 1.0, theta2_0 = 0.0; // Initial angles
    double omega1_0 = 0.0, omega2_0 = 0.0; // Initial velocities
    double damping = 0.0;                 // Damping coefficient
    bool show_labels = true;              // Display labels
    bool show_trails = false;             // Display trajectory
    bool trail_fade_enabled = true;       // Whether trails fade over time
    double trail_fade_time = 5.0;         // Trail fade duration in seconds
    
    PendulumConfiguration toConfiguration() const {
        PendulumConfiguration config;
        config.l1 = l1; config.l2 = l2;
        config.m1 = m1; config.m2 = m2;
        config.damping = damping;
        return config;
    }
    
    SimulationState toInitialState() const {
        SimulationState state;
        state.theta1 = theta1_0; state.theta2 = theta2_0;
        state.omega1 = omega1_0; state.omega2 = omega2_0;
        state.timestamp = 0.0;
        return state;
    }
};

/**
 * Parameters for analysis view
 */
struct AnalysisParams {
    int grid_resolution_x = 256, grid_resolution_y = 256;
    double theta1_min = -M_PI, theta1_max = M_PI;
    double theta2_min = -M_PI, theta2_max = M_PI;
    int color_scheme = 0; // 0=blue-red, 1=viridis, 2=plasma
    double integration_time = 5.0; // Analysis duration
    
    bool isValid() const {
        return grid_resolution_x > 0 && grid_resolution_y > 0 &&
               theta1_min < theta1_max && theta2_min < theta2_max &&
               integration_time > 0.0;
    }
};

/**
 * Main UI manager class
 */
class UIManager {
public:
    UIManager();
    ~UIManager();
    
    bool initialize();
    void cleanup();
    
    // Main update loop - call once per frame
    UIEvents update(const UIContext& context);
    
    // Render UI overlays
    void render();
    
    // Parameter access
    const SimulationParams& getSimulationParams() const { return m_simulationParams; }
    const AnalysisParams& getAnalysisParams() const { return m_analysisParams; }
    
    // Handle window events
    void onWindowResize(int width, int height);

private:
    void renderMenuBar(UIEvents& events, const UIContext& context);
    void renderSimulationControls(UIEvents& events, const UIContext& context);
    void renderAnalysisControls(UIEvents& events, const UIContext& context);
    void renderStatusBar(const UIContext& context);
    
    SimulationParams m_simulationParams;
    AnalysisParams m_analysisParams;
    int m_windowWidth = 800;
    int m_windowHeight = 600;
    bool m_showDemo = false;
};

} // namespace pendulum
